const gameGenres=[{id:4,name:"Action"},{id:51,name:"Indie"},{id:3,name:"Adventure"},{id:5,name:"RPG"},{id:10,name:"Strategy"},{id:2,name:"Shooter"},{id:40,name:"Casual"},{id:14,name:"Simulation"},{id:7,name:"Puzzle"},{id:11,name:"Arcade"},{id:83,name:"Platformer"},{id:1,name:"Racing"},{id:59,name:"Massively Multiplayer"},{id:15,name:"Sports"},{id:6,name:"Fighting"},{id:19,name:"Family"},{id:28,name:"Board Games"},{id:34,name:"Educational"},{id:17,name:"Card"}],gameTitles=["Minecraft","Grand Theft Auto V","Deathloop","Resident Evil Village","Returnal","It Takes Two","Ratchet & Clank: Rift Apart","Halo Infinite","Forza Horizon 5","Psychonauts 2"];let gameCompanies=[];const key="d6823dbd4637434998d92a3eb889e30c";async function fetchDevelopers(){const e=await fetch(`https://api.rawg.io/api/developers?key=${key}&page_size=20`);return(await e.json()).results}async function initData(){const e=await fetchDevelopers();return gameCompanies=e.map((e=>({id:e.id,name:e.name}))),Promise.resolve()}function findGenreIdByName(e){const a=gameGenres.find((a=>a.name===e));return a?a.id:null}async function fetchData(e,a){try{let n;switch(e){case"searchGames":n=`searchGames?key=${key}`;break;case"randomGames":n=`randomGames?key=${key}&page=${a.page}`;break;case"genre":n=`genre?key=${key}`;break;case"developer":n=`developer?key=${key}`;break;case"platform":n=`platform?key=${key}`;break;default:return void console.error("Invalid endpoint:",e)}const t=await fetch(`http://localhost:3000/api/${n}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)});return await t.json()}catch(e){console.error("Error fetching data:",e)}}function formatDate(e){const a=new Date(e),n=a.getDate();return`${["January","February","March","April","May","June","July","August","September","October","November","December"][a.getMonth()]} ${n}, ${a.getFullYear()}`}function createCardTemplate(e,a){const n=e.name||"Unknown Game",t=e.released?formatDate(e.released):"Unknown Release Date",r=e.background_image||"../images/NoImageFound.png",i=e.rating||"Not rated yet",s=e.genres||[],o=Array.isArray(s)?s.map((e=>e?e.name:"")).join(", "):"Unknown Genre",c=e.platforms||[],d=Array.isArray(c)?c.map((e=>e.platform?e.platform.name:"Unknown Platform")).join(", "):"Unknown Platform";return"mini"===a?`\n        <div class="mini-card" id="${e.id}">\n        <div class="mini-card-image">\n          <img src="${r}" alt="${n}" />\n        </div>\n        <div class="mini-card-content">\n          <h3 class="mini-name">${n}</h3>\n          <p class="mini-base">Release Date: </p><p>${t}</p>\n          <p class="mini-base">Genres: </p><p>${o}</p>\n          <p class="mini-base">Rating: </p>${i}</p>\n          <p class="mini-base">Platforms: </p><p>${d}</p>\n        </div>\n      </div>\n    `:`\n      <div class="card" id="${e.id}">\n      <div class="card-image">\n        <img src="${r}" alt="${n}" />\n      </div>\n      <div class="card-content">\n        <h3 class="name">${n}</h3>\n        <p class="base">Release Date: </p><p>${t}</p>\n        <p class="base">Genres: </p><p>${o}</p>\n        <p class="base">Rating: </p>${i}</p>\n        <p class="base">Platforms: </p><p>${d}</p>\n      </div>\n      </div>\n    `}function createGenreCard(e){return`\n    <div class="genre-card" data-id="${e.id}" data-name="${e.name}">\n      <div class="genre-card-content">\n        <h3>${e.name}</h3>\n      </div>\n    </div>\n  `}async function populateGenresGrid(){const e=document.getElementById("genres-grid"),a=gameGenres.map(createGenreCard).join("");e.innerHTML=a}async function populateElement(e,a,n){const t=await fetch(`https://api.rawg.io/api/games?key=${key}&ordering=-${a}&page_size=${e}&metacritic=1,100`),r=(await t.json()).results,i=document.getElementById(n);for(let e=0;e<r.length;e++){const a=createCardTemplate(r[e],"normal");i.insertAdjacentHTML("beforeend",a)}}async function handleSearch(e,a,n,t,r){const i=await fetchData(e,a);if(!i||!i.length)return void console.log("No results found");const s=i.slice(0,t).map((e=>createCardTemplate(e,r))).join("");n.innerHTML=s}async function randomGames(e,a,n,t){const r=document.getElementById(a);if("title"===e){const e=Math.floor(Math.random()*gameTitles.length),a=gameTitles[e];await handleSearch("searchGames",{query:a},r,n,t)}else if("genre"===e){const e=Math.floor(Math.random()*gameGenres.length),a=gameGenres[e];await handleSearch("genre",{genre:a.id},r,n,t)}else if("company"===e){await initData();const e=Math.floor(Math.random()*gameCompanies.length),a=gameCompanies[e];await handleSearch("developer",{developer:a.id},r,n,t)}else"rating"===e?await handleSearch("rating",{rating:"90,100"},r,n,t):"year"===e&&await handleSearch("year",{dates:"2021-01-01,2021-12-31"},r,n,t)}async function genreGames(e,a,n,t){const r=e.id;if(!r)return void console.log(`genre "${e.name}" not found.`);const i=a;await handleSearch("genre",{genre:r},i,n,t)}async function platformGames(e,a,n,t){const r=document.getElementById(a);await handleSearch("platform",{platform:e},r,n,t)}async function randomGeneralGames(e,a,n,t){await handleSearch("randomGames",{page:t},e,a,n)}